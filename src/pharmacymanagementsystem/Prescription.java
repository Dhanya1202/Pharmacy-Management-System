
package pharmacymanagementsystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;


 
public class Prescription extends javax.swing.JFrame {
    
    private final int customerId;
    //private DefaultTableModel tableModel;
    /**
     * Creates new form Prescription
     * @param customerId
     */
    public Prescription(int customerId) {
        this.customerId = customerId;
        //this.tableModel = (DefaultTableModel) PrescriptionDetailsTable.getModel();
        initComponents();
        initializeTableModel();
        populatePresListContent(customerId);
        showPrescriptionsForCustomer(customerId);
        displayCustomerDetails(customerId);
        // Add a ListSelectionListener to the list of prescriptions
        PresListContent.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                PresListContentValueChanged(evt);
            }
        });
        PrescriptionDetailsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
    @Override
    public void valueChanged(ListSelectionEvent event) {
        if (!event.getValueIsAdjusting()) {
            int selectedRow = PrescriptionDetailsTable.getSelectedRow();
            if (selectedRow != -1) {
                fillComponentsWithTableData(selectedRow);
            }
        }
    }
});
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu1 = new java.awt.PopupMenu();
        jMenu1 = new javax.swing.JMenu();
        medicineNameTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PrescriptionDetailsTable = new javax.swing.JTable();
        tbClear = new javax.swing.JButton();
        tbUpdate = new javax.swing.JButton();
        AddNewPrescription = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        PresList = new javax.swing.JScrollPane();
        PresListContent = new javax.swing.JList<>();
        tbcustomerName = new javax.swing.JTextField();
        tbcustomerId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        medicineNameTextField = new javax.swing.JTextField();
        notesTextField = new javax.swing.JTextField();
        drugTypeTextField = new javax.swing.JTextField();
        dosageTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tbDeleteEntry = new javax.swing.JButton();
        tbDeletePrescription = new javax.swing.JButton();

        popupMenu1.setLabel("popupMenu1");

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("PRESCRIPTIONS");

        PrescriptionDetailsTable.setAutoCreateRowSorter(true);
        PrescriptionDetailsTable.setBackground(new java.awt.Color(204, 204, 255));
        PrescriptionDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "MedicineName", "Dosage", "DrugType", "Notes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(PrescriptionDetailsTable);

        tbClear.setBackground(new java.awt.Color(204, 204, 255));
        tbClear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tbClear.setText("CLEAR");
        tbClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbClearActionPerformed(evt);
            }
        });

        tbUpdate.setBackground(new java.awt.Color(204, 204, 255));
        tbUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tbUpdate.setText("UPDATE");
        tbUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbUpdateActionPerformed(evt);
            }
        });

        AddNewPrescription.setText("+");
        AddNewPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewPrescriptionActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(204, 204, 255));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        PresList.setBackground(new java.awt.Color(204, 204, 255));
        PresList.setViewportView(getJMenuBar());

        PresListContent.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        PresListContent.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                PresListContentValueChanged(evt);
            }
        });
        PresList.setViewportView(PresListContent);

        tbcustomerName.setEditable(false);
        tbcustomerName.setBackground(new java.awt.Color(204, 204, 255));

        tbcustomerId.setEditable(false);

        jLabel2.setText("Customer:");

        medicineNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicineNameTextFieldActionPerformed(evt);
            }
        });

        drugTypeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drugTypeTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Medicine Name:");

        jLabel4.setText("Dosage:");

        jLabel5.setText("Notes:");

        jLabel6.setText("Drug Type:");

        tbDeleteEntry.setBackground(new java.awt.Color(204, 204, 255));
        tbDeleteEntry.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tbDeleteEntry.setText("DELETE ENTRY");
        tbDeleteEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbDeleteEntryActionPerformed(evt);
            }
        });

        tbDeletePrescription.setBackground(new java.awt.Color(255, 102, 102));
        tbDeletePrescription.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tbDeletePrescription.setText("DELETE PRESCRIPTION");
        tbDeletePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbDeletePrescriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(AddNewPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PresList)
                            .addComponent(tbcustomerId, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(tbcustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(14, 14, 14))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(notesTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dosageTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(medicineNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(drugTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tbDeletePrescription)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAdd)
                                .addGap(27, 27, 27)
                                .addComponent(tbUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(tbDeleteEntry)
                                .addGap(18, 18, 18)
                                .addComponent(tbClear))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(213, 213, 213))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drugTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbcustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medicineNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dosageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbcustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(notesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tbUpdate)
                            .addComponent(tbClear)
                            .addComponent(btnAdd)
                            .addComponent(tbDeleteEntry)
                            .addComponent(tbDeletePrescription))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddNewPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PresList, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void fillComponentsWithTableData(int selectedRow) {
    DefaultTableModel model = (DefaultTableModel) PrescriptionDetailsTable.getModel();
    medicineNameTextField.setText(model.getValueAt(selectedRow, 0).toString());
    dosageTextField.setText(model.getValueAt(selectedRow, 1).toString());
    drugTypeTextField.setText(model.getValueAt(selectedRow, 2).toString());
    notesTextField.setText(model.getValueAt(selectedRow, 3).toString());
}

private void initializeTableModel() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Medicine Name");
        model.addColumn("Dosage");
        model.addColumn("Drug Type");
        model.addColumn("Notes");        
        PrescriptionDetailsTable.setModel(model);
    }
  
private void showPrescriptionsForCustomer(int customerId) {
    DefaultTableModel model = (DefaultTableModel) PrescriptionDetailsTable.getModel();
    model.setRowCount(0); // Clear the table before populating it

    try {
        // Create a query to retrieve prescriptions and their associated medicine details for the selected customer
        try ( // Establish a database connection
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "kishoremyna")) {
            // Create a query to retrieve prescriptions and their associated medicine details for the selected customer
            String query = "SELECT p.PId, m.MedicineName, m.Dosage, m.DrugType, m.Notes FROM Prescription p "
                    + "LEFT JOIN Prescription_Medicines m ON p.PId = m.PId "
                    + "WHERE p.CId = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(query);
            preparedStatement.setInt(1, customerId);
            
            ResultSet result = preparedStatement.executeQuery();
            
            // Loop through the result set and add rows to the table
            while (result.next()) {
                //int prescriptionId = result.getInt("PId");
                String medicineName = result.getString("MedicineName");
                String dosage = result.getString("Dosage");
                String drugType = result.getString("DrugType");
                String notes = result.getString("Notes");
                
                // Add a new row to the table with the medicine details
                model.addRow(new Object[] { medicineName, dosage, drugType, notes });
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}
private void displayCustomerDetails(int customerId) {
    try {
        // Establish a database connection
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "kishoremyna");
        String query = "SELECT Name FROM manage_customer WHERE ID = ?";
        PreparedStatement preparedStatement = conn.prepareStatement(query);
        preparedStatement.setInt(1, customerId);

        ResultSet result = preparedStatement.executeQuery();

        if (result.next()) {
            tbcustomerId.setText(String.valueOf(customerId));
            String name = result.getString("Name");
            tbcustomerName.setText(name);
        } else {
            JOptionPane.showMessageDialog(this, "Customer not found for ID: " + customerId);
        }

        conn.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}


private void populatePresListContent(int customerId) {
    DefaultListModel<String> listModel = new DefaultListModel<>();
    
    try {
        // Establish a database connection
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "kishoremyna");
        String query = "SELECT PId FROM Prescription WHERE CId = ?";
        PreparedStatement preparedStatement = conn.prepareStatement(query);
        preparedStatement.setInt(1, customerId);

        ResultSet result = preparedStatement.executeQuery();

        // Loop through the result set and add prescription IDs to the list model
        while (result.next()) {
            int prescriptionId = result.getInt("PId");
            listModel.addElement(String.valueOf(prescriptionId));
        }

        conn.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }

    // Set the list model for PresListContent
    PresListContent.setModel(listModel);
}


    private void tbClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbClearActionPerformed
         medicineNameTextField.setText("");
dosageTextField.setText("");
    drugTypeTextField.setText("");
    notesTextField.setText("");
    }//GEN-LAST:event_tbClearActionPerformed

    private void tbUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbUpdateActionPerformed
         // Check if a prescription is selected for update
    String selectedPrescriptionId = PresListContent.getSelectedValue();

    if (selectedPrescriptionId == null) {
        JOptionPane.showMessageDialog(this, "Please select a prescription to save changes.");
        return;
    }

    // Retrieve the prescription details from your Swing components
    String medicineName = medicineNameTextField.getText();
    String dosage = dosageTextField.getText();
    String drugType = drugTypeTextField.getText();
    String notes = notesTextField.getText();

    try {
        // Establish a database connection
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "kishoremyna");

        // Create a query to update the prescription details in the Prescription_Medicines table
        String updatePrescriptionMedicineQuery = "UPDATE Prescription_Medicines SET Dosage = ?, DrugType = ?, Notes = ? WHERE PId = ? AND MedicineName = ?";
        PreparedStatement updatePrescriptionMedicineStatement = conn.prepareStatement(updatePrescriptionMedicineQuery);
        updatePrescriptionMedicineStatement.setString(1, dosage);
        updatePrescriptionMedicineStatement.setString(2, drugType);
        updatePrescriptionMedicineStatement.setString(3, notes);
        updatePrescriptionMedicineStatement.setInt(4, Integer.parseInt(selectedPrescriptionId));
        updatePrescriptionMedicineStatement.setString(5, medicineName);

        int rowsAffected = updatePrescriptionMedicineStatement.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Changes to prescription saved successfully.");
             refreshTable();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to save changes to prescription.");
        }

        conn.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_tbUpdateActionPerformed
 
    // Add this method to refresh the table
private void refreshTable() {
 DefaultTableModel model = (DefaultTableModel) PrescriptionDetailsTable.getModel();
    model.setRowCount(0); // Clear the existing table data

    // Assuming you have the selected prescription ID, you can use it to refresh the table
    String selectedPrescriptionId = PresListContent.getSelectedValue();
    if (selectedPrescriptionId != null) {
        // Fetch and populate the table data for the selected prescription
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "kishoremyna");
            String query = "SELECT MedicineName, Dosage, DrugType, Notes FROM Prescription_Medicines WHERE PId = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(query);
            preparedStatement.setInt(1, Integer.parseInt(selectedPrescriptionId));
            ResultSet result = preparedStatement.executeQuery();
            while (result.next()) {
                // Create an array of objects to represent a row
                Object[] row = new Object[4]; // You have 4 columns: MedicineName, Dosage, DrugType, Notes
                row[0] = result.getString("MedicineName");
                row[1] = result.getString("Dosage");
                row[2] = result.getString("DrugType");
                row[3] = result.getString("Notes");
                // Add the row to the table model
                model.addRow(row);
            }
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
}
    private void AddNewPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewPrescriptionActionPerformed

       
    try {
        // Establish a database connection
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "kishoremyna");

        String checkCustomerQuery = "SELECT ID FROM manage_customer WHERE ID = ?";
        PreparedStatement checkCustomerStatement = conn.prepareStatement(checkCustomerQuery);
        checkCustomerStatement.setInt(1, customerId);
        ResultSet customerResult = checkCustomerStatement.executeQuery();

        if (customerResult.next()) {
            // Customer exists, proceed to add a new prescription
            String medicineName =  medicineNameTextField.getText(); // Get medicineName from a component
            String dosage =dosageTextField.getText(); // Get dosage from a component
            String drugType =  drugTypeTextField.getText(); // Get drugType from a component
            String notes =  notesTextField.getText(); // Get notes from a component

            // Create a query to insert a new prescription into the Prescription table
            String addPrescriptionQuery = "INSERT INTO Prescription (CId) VALUES (?)";
            PreparedStatement addPrescriptionStatement = conn.prepareStatement(addPrescriptionQuery, Statement.RETURN_GENERATED_KEYS);
            addPrescriptionStatement.setInt(1, customerId);
            addPrescriptionStatement.executeUpdate();

            
            int prescriptionId = PrescriptionIdGenerator.generateUniquePRESID();
            

            // Insert the prescription details into the Prescription_Medicines table
            String addPrescriptionMedicineQuery = "INSERT INTO Prescription_Medicines (PId, MedicineName, Dosage, DrugType, Notes) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement addPrescriptionMedicineStatement = conn.prepareStatement(addPrescriptionMedicineQuery);
            addPrescriptionMedicineStatement.setInt(1, prescriptionId);
            addPrescriptionMedicineStatement.setString(2, medicineName);
            addPrescriptionMedicineStatement.setString(3, dosage);
            addPrescriptionMedicineStatement.setString(4, drugType);
            addPrescriptionMedicineStatement.setString(5, notes);
            addPrescriptionMedicineStatement.executeUpdate();

            JOptionPane.showMessageDialog(this, "New prescription added successfully.");
            populatePresListContent(customerId);
        showPrescriptionsForCustomer(customerId);
        } else {
            // Customer does not exist
            JOptionPane.showMessageDialog(this, "Customer not found. Please enter a valid Customer ID.");
        }

        conn.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());}
    }//GEN-LAST:event_AddNewPrescriptionActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
   
        String selectedPrescriptionId = PresListContent.getSelectedValue();

    if (selectedPrescriptionId == null) {
        JOptionPane.showMessageDialog(this, "Please select a prescription to add a new entry.");
        return;
    }

    // Retrieve the data from the Swing components
    String medicineName = medicineNameTextField.getText();
    String dosage = dosageTextField.getText();
    String drugType = drugTypeTextField.getText();
    String notes = notesTextField.getText();

    // Add the data to the table
    DefaultTableModel model = (DefaultTableModel) PrescriptionDetailsTable.getModel();
    model.addRow(new Object[] { medicineName, dosage, drugType, notes });

    // Update the database with the new entry
    try {
        // Establish a database connection
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "kishoremyna");

        // Create a query to insert the new entry into the Prescription_Medicines table
        String addEntryQuery = "INSERT INTO Prescription_Medicines (PId, MedicineName, Dosage, DrugType, Notes) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement addEntryStatement = conn.prepareStatement(addEntryQuery);
        addEntryStatement.setInt(1, Integer.parseInt(selectedPrescriptionId));
        addEntryStatement.setString(2, medicineName);
        addEntryStatement.setString(3, dosage);
        addEntryStatement.setString(4, drugType);
        addEntryStatement.setString(5, notes);
        addEntryStatement.executeUpdate();

        JOptionPane.showMessageDialog(this, "New entry added to the prescription and database successfully.");

        conn.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnAddActionPerformed


    private void PresListContentValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_PresListContentValueChanged
    
        if (!evt.getValueIsAdjusting()) {
        DefaultTableModel model = (DefaultTableModel) PrescriptionDetailsTable.getModel();
        model.setRowCount(0); // Clear existing rows in the table

        // Get the selected prescription ID from the JList
        String selectedPrescriptionId = PresListContent.getSelectedValue();
        if (selectedPrescriptionId != null) {
            try {
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "kishoremyna");
                String query = "SELECT MedicineName, Dosage, DrugType, Notes FROM Prescription_Medicines WHERE PId = ?";
                PreparedStatement preparedStatement = conn.prepareStatement(query);
                preparedStatement.setInt(1, Integer.parseInt(selectedPrescriptionId));
                ResultSet result = preparedStatement.executeQuery();
                while (result.next()) {
                    // Create an array of objects to represent a row
                    Object[] row = new Object[4]; // You have 4 columns: MedicineName, Dosage, DrugType, Notes
                    row[0] = result.getString("MedicineName");
                    row[1] = result.getString("Dosage");
                    row[2] = result.getString("DrugType");
                    row[3] = result.getString("Notes");
                    // Add the row to the table model
                    model.addRow(row);
                }
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
        }
    }
           
    }//GEN-LAST:event_PresListContentValueChanged

    private void medicineNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicineNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_medicineNameTextFieldActionPerformed

    private void drugTypeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drugTypeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_drugTypeTextFieldActionPerformed

    private void tbDeleteEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbDeleteEntryActionPerformed
         DefaultTableModel model = (DefaultTableModel) PrescriptionDetailsTable.getModel();
    int selectedRow = PrescriptionDetailsTable.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        return;
    }

    // Assuming the Prescription ID (PId) and MedicineName are in the first and second columns of the table
    String prescriptionIdToDelete = PresListContent.getSelectedValue();
    String medicineNameToDelete = model.getValueAt(selectedRow, 0).toString();

    try {
        // Establish a database connection
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "kishoremyna");

        // Create a query to delete the row from the Prescription_Medicines table
        String deleteQuery = "DELETE FROM Prescription_Medicines WHERE PId = ? AND MedicineName = ?";
        PreparedStatement deleteStatement = conn.prepareStatement(deleteQuery);
        deleteStatement.setInt(1, Integer.parseInt(prescriptionIdToDelete));
        deleteStatement.setString(2, medicineNameToDelete);

        int rowsAffected = deleteStatement.executeUpdate();

        if (rowsAffected > 0) {
            // Remove the selected row from the table
            model.removeRow(selectedRow);
            JOptionPane.showMessageDialog(this, "Row deleted successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete the row.");
        }

        conn.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_tbDeleteEntryActionPerformed

    private void tbDeletePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbDeletePrescriptionActionPerformed
        String prescriptionId=PresListContent.getSelectedValue();
        try {
        // Establish a database connection
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "kishoremyna");
        
        // Start a transaction
        conn.setAutoCommit(false);

        // Delete all related records in Prescription_Medicines
        String deletePrescriptionMedicinesQuery = "DELETE FROM Prescription_Medicines WHERE PId = ?";
        PreparedStatement deletePrescriptionMedicinesStatement = conn.prepareStatement(deletePrescriptionMedicinesQuery);
        deletePrescriptionMedicinesStatement.setInt(1, Integer.parseInt(prescriptionId));
        int medicinesDeleted = deletePrescriptionMedicinesStatement.executeUpdate();

        // Delete the prescription in the Prescription table
        String deletePrescriptionQuery = "DELETE FROM Prescription WHERE PId = ?";
        PreparedStatement deletePrescriptionStatement = conn.prepareStatement(deletePrescriptionQuery);
        deletePrescriptionStatement.setInt(1, Integer.parseInt(prescriptionId));
        int prescriptionDeleted = deletePrescriptionStatement.executeUpdate();

        if (medicinesDeleted > 0 && prescriptionDeleted > 0) {
            // All related records and prescription deleted successfully
            conn.commit();
            JOptionPane.showMessageDialog(this, "Prescription deleted successfully.");
            populatePresListContent(customerId);
            showPrescriptionsForCustomer(customerId);
        } else {
            // Something went wrong, rollback the transaction
            conn.rollback();
            JOptionPane.showMessageDialog(this, "Failed to delete the prescription.");
        }

        conn.setAutoCommit(true);
        conn.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_tbDeletePrescriptionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Prescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Prescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Prescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Prescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run(int customerId) {
                new Prescription(customerId).setVisible(true);
            }

            @Override
            public void run() {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNewPrescription;
    private javax.swing.JScrollPane PresList;
    private javax.swing.JList<String> PresListContent;
    private javax.swing.JTable PrescriptionDetailsTable;
    private javax.swing.JButton btnAdd;
    private javax.swing.JTextField dosageTextField;
    private javax.swing.JTextField drugTypeTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField medicineNameTextField;
    private javax.swing.JTextField medicineNameTextField1;
    private javax.swing.JTextField notesTextField;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JButton tbClear;
    private javax.swing.JButton tbDeleteEntry;
    private javax.swing.JButton tbDeletePrescription;
    private javax.swing.JButton tbUpdate;
    private javax.swing.JTextField tbcustomerId;
    private javax.swing.JTextField tbcustomerName;
    // End of variables declaration//GEN-END:variables
}
