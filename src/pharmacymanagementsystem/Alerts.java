
package pharmacymanagementsystem;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import static pharmacymanagementsystem.DatabaseManager.getConnection;

public class Alerts extends javax.swing.JFrame {

   private DefaultTableModel tableModel;
    public Alerts() {
        initComponents();
        tableModel = (DefaultTableModel) alertsTable.getModel();
        tableModel.setColumnIdentifiers(new Object[]{"S no", "Time", "Alert Type", "MedicineID"});

        int delay = 60000; // 1 min
        Timer timer = new Timer(delay, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                checkMedicineAlerts();
            }
        });
        // Start the timer
        timer.start();
        //displayAlertsFromDatabase();
         checkMedicineAlerts();
        // Add the TableModelListener here to listen for updates to the "Done?" column
        tableModel.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int column = e.getColumn();
                    int row = e.getFirstRow();
             
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        alertsTable = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        alertsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S no.", "Time", "Alert Type", "MedicineID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(alertsTable);

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        jTextField2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jTextField2.setText("ALERTS");
        jTextField2.setBorder(null);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    public void checkMedicineAlerts() {
        try {
            Connection conn = getConnection(); // Reuse the database connection
            conn.setAutoCommit(true);
            Date currentDate = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String formattedDate = sdf.format(currentDate);
            tableModel.setRowCount(0);

            String expiryQuery = "SELECT ID FROM manage_medicine WHERE ExpDate <= DATE_ADD(?, INTERVAL 1 MONTH)";
            String lowStockQuery = "SELECT ID FROM manage_medicine WHERE Quantity < 20";

            PreparedStatement expiryStatement = conn.prepareStatement(expiryQuery);
            PreparedStatement lowStockStatement = conn.prepareStatement(lowStockQuery);

            expiryStatement.setString(1, formattedDate);
            

            ResultSet expiryResult = expiryStatement.executeQuery();
            ResultSet lowStockResult = lowStockStatement.executeQuery();

            int serialNumber = 1;

            while (expiryResult.next()) {
                String medicineID = expiryResult.getString("ID");
                tableModel.addRow(new Object[] { serialNumber, getCurrentTime(), "Expiry", medicineID });
                 insertAlert(getCurrentTime(), "Expiry", medicineID); 
                serialNumber++;
            }

            while (lowStockResult.next()) {
                String medicineID = lowStockResult.getString("ID");
                tableModel.addRow(new Object[] { serialNumber, getCurrentTime(), "Low Stock", medicineID });
                 insertAlert(getCurrentTime(), "Low Stock", medicineID);
                serialNumber++;
            }

            conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }
    private void insertAlert(String time, String alertType, String medicineId) {
    try {
            Connection conn = getConnection();

            String insertQuery = "INSERT INTO alerts ( MedID, AlertType,GeneratedAt) VALUES (?, ?, NOW())";
            PreparedStatement insertStatement = conn.prepareStatement(insertQuery);
        insertStatement.setString(1, medicineId);
        insertStatement.setString(2, alertType);

            int rowsInserted = insertStatement.executeUpdate();

            if (rowsInserted > 0) {
                System.out.println("Alert inserted successfully.");
            } else {
                System.err.println("Alert insertion failed.");
            }

            conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
}
    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "pass");
    }

private static String getCurrentTime() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        return dtf.format(now);
    }

 public void displayAlertsFromDatabase() {
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "pass");
            // Create a query to retrieve alerts from the database
            String query = "SELECT * FROM alerts";
            PreparedStatement preparedStatement = conn.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            int serialNumber=0;
            // Iterate through the result set and add rows to the table
            while (resultSet.next()) {
                serialNumber ++;
                String alertType = resultSet.getString("AlertType");
                String medicineId = resultSet.getString("MedID");

                tableModel.addRow(new Object[]{serialNumber, " ",alertType, medicineId});
            }

            conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }

private void deleteAlert(int row) {
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "pass");       
            int sno = (int) tableModel.getValueAt(row, tableModel.findColumn("S no.")); // Get the S no. of the alert to be deleted         
            // Construct a query to delete the alert based on the S no.
            String deleteQuery = "DELETE FROM alerts WHERE SNo = ?";
            PreparedStatement deleteStatement = conn.prepareStatement(deleteQuery);
            deleteStatement.setInt(1, sno);          
            int deletedRows = deleteStatement.executeUpdate();           
            if (deletedRows > 0) {
                System.out.println("Alert marked as 'Done' and deleted.");
            } else {
                System.err.println("Failed to delete alert.");
            }
            
            conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

private void refreshTable() {
    checkMedicineAlerts(); // This will refresh the table with the latest alerts
}
    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Alerts alertsFrame = new Alerts();
                alertsFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                alertsFrame.pack();
                alertsFrame.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable alertsTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
